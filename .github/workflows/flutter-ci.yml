name: Flutter CI

on:
  pull_request:
  push:
    branches:
      - master
    paths-ignore:
      - "**/*.md"

jobs:
  build:
    strategy:
      matrix:
        platform: [self-hosted]
        java-version: [17]
        android-compile-sdk: [30]
        android-build-tools: [30.0.3]
        android-sdk-tools: [9477386]
        flutter-version: ["3.10.6"]
        channel: ["stable"]
        arch: [x64]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: ${{ matrix.java-version }}

      - name: Linux - Install dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install -y sqlite3 libsqlite3-dev clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev libstdc++-10-dev

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ matrix.flutter-version }}
          channel: ${{ matrix.channel }}
          architecture: ${{ matrix.arch }}
          cache: false

      # Mark the flutter directory as safe.
      - run: git config --global --add safe.directory /opt/hostedtoolcache/flutter/${{ matrix.channel }}-${{ matrix.flutter-version }}-${{ matrix.arch }}

      # Print installed flutter version.
      - run: flutter --version

      # Get flutter dependencies.
      - run: flutter pub get

      # Check for any formatting issues in the code.
      - run: dart format --set-exit-if-changed .

      # Statically analyze the Dart code for any errors.
      - run: flutter analyze .

      # Run widget tests for our flutter project.
      - run: flutter test

      # Run integration tests for our flutter project.
      - name: Run integration tests
        timeout-minutes: 30
        run: |
          apt-get update && apt-get install -y unzip wget

          export ANDROID_HOME="${PWD}/android-sdk-root"
          install -d $ANDROID_HOME
          wget --no-verbose --output-document=$ANDROID_HOME/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${{matrix.android-sdk-tools}}_latest.zip
          unzip -q -d "$ANDROID_HOME/cmdline-tools" "$ANDROID_HOME/cmdline-tools.zip"
          mv -T "$ANDROID_HOME/cmdline-tools/cmdline-tools" "$ANDROID_HOME/cmdline-tools/tools"
          export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/cmdline-tools/tools/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/emulator

          sdkmanager --version

          yes | sdkmanager --licenses > /dev/null || true
          sdkmanager "platforms;android-${{matrix.android-compile-sdk}}"
          sdkmanager "platform-tools"
          sdkmanager "build-tools;${{matrix.android-build-tools}}"
          sdkmanager --list --verbose
          sdkmanager "system-images;android-${{matrix.android-compile-sdk}};google_apis;x86_64"
          sdkmanager "emulator"
          echo "no" | avdmanager create avd --force -n test_emulator -k "system-images;android-${{matrix.android-compile-sdk}};google_apis;x86_64"
          emulator -list-avds
          adb start-server
          echo "Starting emulator..."
          emulator -avd test_emulator -skin 600x1024 -no-audio -no-window -no-boot-anim -accel on -gpu swiftshader_indirect -debug -all & adb wait-for-device
          echo "Emulator started successfully."
          flutter devices
          flutter test integration_test/

      # Build apk.
      - run: flutter build apk
        env:
          ANDROID_SDK_ROOT: ${{ github.workspace }}/android-home

      # Upload generated apk to the artifacts.
      - name: Upload apk to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: release-apk
          path: build/app/outputs/apk/release/app-release.apk
